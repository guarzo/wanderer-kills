name: CI/CD

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  pull_request:
    branches: [main]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      MIX_ENV: test
    steps:
      - uses: actions/checkout@v4

      - name: Set up Elixir
        id: beam
        uses: erlef/setup-beam@v1
        with:
          elixir-version: "1.18.4"
          otp-version: "27.0"

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
            ~/.hex
            ~/.mix
            ~/.cache/rebar3
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix-

      - name: Restore PLT cache
        uses: actions/cache@v4
        id: plt_cache
        with:
          key: ${{ runner.os }}-${{ steps.beam.outputs.elixir-version }}-${{ steps.beam.outputs.otp-version }}-plt
          restore-keys: |
            ${{ runner.os }}-${{ steps.beam.outputs.elixir-version }}-${{ steps.beam.outputs.otp-version }}-plt
          path: |
            priv/plts

      - name: Install dependencies
        run: mix deps.get --include-children

      - name: Compile (with special handling for Mox warnings)
        run: |
          mix compile 2>&1 | (grep -v "redefining module" || true)
          [ ${PIPESTATUS[0]} -eq 0 ] || exit 1

      - name: Check formatting
        run: mix format --check-formatted

      - name: Run Credo
        id: credo
        run: |
          echo "## Credo Results" >> $GITHUB_STEP_SUMMARY

          # Run credo and capture the exit code
          mix credo --format=oneline > credo_output.txt 2>&1 || CREDO_EXIT_CODE=$?

          # Count issues
          if [ -f credo_output.txt ]; then
            # Count different types of issues
            ISSUES=$(grep -E "[\[]([RCFAWSD])[\]]" credo_output.txt | wc -l || echo "0")
            echo "credo_issues=$ISSUES" >> $GITHUB_OUTPUT

            if [ "$ISSUES" -eq 0 ]; then
              echo "✅ **Credo passed with 0 issues**" >> $GITHUB_STEP_SUMMARY
              echo "credo_status=passing" >> $GITHUB_OUTPUT
            else
              echo "⚠️ **Credo found $ISSUES issues**" >> $GITHUB_STEP_SUMMARY
              echo "credo_status=issues" >> $GITHUB_OUTPUT
              # Show summary in step summary
              tail -20 credo_output.txt >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "credo_issues=0" >> $GITHUB_OUTPUT
            echo "credo_status=passing" >> $GITHUB_OUTPUT
          fi

          # Don't fail the build for credo issues (non-strict mode)
          exit 0

      - name: Compile for dev (for Dialyzer)
        run: MIX_ENV=dev mix compile

      - name: Create PLTs
        if: steps.plt_cache.outputs.cache-hit != 'true'
        run: MIX_ENV=dev mix dialyzer --plt

      - name: Run Dialyzer
        id: dialyzer
        run: |
          echo "## Dialyzer Results" >> $GITHUB_STEP_SUMMARY

          # Run dialyzer and capture output
          MIX_ENV=dev mix dialyzer --format short > dialyzer_output.txt 2>&1 || DIALYZER_EXIT_CODE=$?

          # Check if Dialyzer itself failed (non-zero exit without warnings)
          if [ -n "$DIALYZER_EXIT_CODE" ] && [ "$DIALYZER_EXIT_CODE" -ne 0 ]; then
            # Check if this is due to warnings or actual failure
            if [ -f dialyzer_output.txt ]; then
              WARNINGS=$(grep -c "warning:" dialyzer_output.txt 2>/dev/null | head -1 || echo "0")
              if ! [[ "$WARNINGS" =~ ^[0-9]+$ ]]; then
                WARNINGS="0"
              fi
              
              if [ "$WARNINGS" -eq 0 ]; then
                # Non-zero exit with no warnings = actual failure
                echo "❌ **Dialyzer failed to run**" >> $GITHUB_STEP_SUMMARY
                echo "dialyzer_status=failed" >> $GITHUB_OUTPUT
                echo "dialyzer_warnings=0" >> $GITHUB_OUTPUT
                cat dialyzer_output.txt >> $GITHUB_STEP_SUMMARY
                exit 1
              fi
            else
              # No output file = complete failure
              echo "❌ **Dialyzer failed to run**" >> $GITHUB_STEP_SUMMARY
              echo "dialyzer_status=failed" >> $GITHUB_OUTPUT
              echo "dialyzer_warnings=0" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi

          # Count warnings - ensure we get a single number
          if [ -f dialyzer_output.txt ]; then
            # Count warning lines and ensure it's a single number
            WARNINGS=$(grep -c "warning:" dialyzer_output.txt 2>/dev/null | head -1 || echo "0")
            # Ensure WARNINGS is a valid number
            if ! [[ "$WARNINGS" =~ ^[0-9]+$ ]]; then
              WARNINGS="0"
            fi
            echo "dialyzer_warnings=$WARNINGS" >> $GITHUB_OUTPUT

            if [ "$WARNINGS" -eq "0" ]; then
              echo "✅ **Dialyzer passed with 0 warnings**" >> $GITHUB_STEP_SUMMARY
              echo "dialyzer_status=passing" >> $GITHUB_OUTPUT
            else
              echo "❌ **Dialyzer found $WARNINGS warnings**" >> $GITHUB_STEP_SUMMARY
              echo "dialyzer_status=warnings" >> $GITHUB_OUTPUT
              # Show warnings in step summary
              grep "warning:" dialyzer_output.txt | head -20 >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          else
            echo "dialyzer_warnings=0" >> $GITHUB_OUTPUT
            echo "dialyzer_status=passing" >> $GITHUB_OUTPUT
          fi
        continue-on-error: false

      - name: Run tests with coverage
        id: tests
        run: |
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          if mix test --max-failures=1; then
            echo "✅ **All tests passed**" >> $GITHUB_STEP_SUMMARY
            echo "tests_status=passing" >> $GITHUB_OUTPUT
          else
            echo "❌ **Some tests failed**" >> $GITHUB_STEP_SUMMARY
            echo "tests_status=failing" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Generate coverage report
        id: coverage
        run: |
          MIX_ENV=test mix test.coverage.ci
          # Try to extract coverage percentage if available
          if [ -f cover/coverage.json ]; then
            COVERAGE=$(jq -r '.percentage // "unknown"' cover/coverage.json 2>/dev/null || echo "unknown")
            if [ "$COVERAGE" = "unknown" ]; then
              echo "Coverage: unknown (malformed coverage.json)" >> $GITHUB_STEP_SUMMARY
            else
              echo "Coverage: ${COVERAGE}%" >> $GITHUB_STEP_SUMMARY
            fi
            echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          else
            echo "Coverage: unknown (coverage.json not found)" >> $GITHUB_STEP_SUMMARY
            echo "coverage=unknown" >> $GITHUB_OUTPUT
          fi

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: cover/

      - name: Create Quality Summary
        if: always()
        run: |
          echo "## 📊 Code Quality Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Credo | ${{ steps.credo.outputs.credo_status == 'passing' && '✅ Passing (0 issues)' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dialyzer | ${{ steps.dialyzer.outputs.dialyzer_status == 'passing' && '✅ Passing (0 warnings)' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ steps.tests.outputs.tests_status == 'passing' && '✅ All passing' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.coverage.outputs.coverage }}" != "unknown" ]; then
            echo "| Coverage | ✅ ${{ steps.coverage.outputs.coverage }}% |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Coverage | ❓ Unknown |" >> $GITHUB_STEP_SUMMARY
          fi

          # Create JSON summary for potential badge usage
          mkdir -p .github/badges
          jq -n \
            --arg credo_status "${{ steps.credo.outputs.credo_status || 'unknown' }}" \
            --arg credo_issues "${{ steps.credo.outputs.credo_issues || '0' }}" \
            --arg dialyzer_status "${{ steps.dialyzer.outputs.dialyzer_status || 'unknown' }}" \
            --arg dialyzer_warnings "${{ steps.dialyzer.outputs.dialyzer_warnings || '0' }}" \
            --arg tests_status "${{ steps.tests.outputs.tests_status || 'unknown' }}" \
            --arg coverage "${{ steps.coverage.outputs.coverage || 'unknown' }}" \
            '{
              "credo": {
                "status": $credo_status,
                "issues": $credo_issues
              },
              "dialyzer": {
                "status": $dialyzer_status,
                "warnings": $dialyzer_warnings
              },
              "tests": {
                "status": $tests_status
              },
              "coverage": $coverage
            }' > .github/badges/quality-status.json

      - name: Upload quality status
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: quality-status
          path: .github/badges/quality-status.json

  docker:
    name: Build and Push Docker Image
    needs: [test, auto-tag]
    runs-on: ubuntu-latest
    # Run on push to main (after auto-tag) or on version tags
    if: |
      (github.ref == 'refs/heads/main' && needs.auto-tag.outputs.new_tag_created == 'true') ||
      startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history to get all tags

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get current version tag
        id: get_tag
        run: |
          # Get the current tag on this commit
          CURRENT_TAG=$(git describe --exact-match --tags HEAD 2>/dev/null || echo "")
          echo "CURRENT_TAG=$CURRENT_TAG" >> $GITHUB_OUTPUT
          echo "Current tag: $CURRENT_TAG"

      - name: Get version information
        id: get_version_info
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # We're running on a tag push
            VERSION_TAG="${GITHUB_REF#refs/tags/}"
            echo "Running on tag: $VERSION_TAG"
          else
            # We're running after auto-tag created new tags
            VERSION_TAG="${{ steps.get_tag.outputs.CURRENT_TAG }}"
            echo "Using auto-created tag: $VERSION_TAG"

            # Fetch the newly created tags
            git fetch --tags
          fi

          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_OUTPUT
          echo "Final version tag: $VERSION_TAG"

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: guarzo/wanderer-kills
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=semver,pattern={{version}},value=${{ steps.get_version_info.outputs.VERSION_TAG }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.get_version_info.outputs.VERSION_TAG }}
            type=semver,pattern={{major}},value=${{ steps.get_version_info.outputs.VERSION_TAG }}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,format=short
            type=raw,value=${{ steps.get_version_info.outputs.VERSION_TAG }},enable=${{ steps.get_version_info.outputs.VERSION_TAG != '' }}

      - name: Build Docker image for testing
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: false
          load: true
          tags: guarzo/wanderer-kills:test
          cache-from: type=gha
          build-args: |
            VCS_REF=${{ github.sha }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VERSION=${{ steps.get_version_info.outputs.VERSION_TAG }}

      - name: Test Docker image
        run: |
          # Basic container test - start and check health
          docker run -d --name test_container -p 4004:4004 guarzo/wanderer-kills:test

          # Give it a moment to start
          sleep 5

          # Check container status
          echo "Container status:"
          docker ps -a | grep test_container || true

          # Check logs regardless
          echo "Container logs:"
          docker logs test_container 2>&1 || true

          # Wait a bit more
          sleep 5

          # Check if container is still running
          if ! docker ps | grep test_container; then
            echo "Container failed to start or exited"
            echo "Final container status:"
            docker ps -a | grep test_container || true
            echo "Final logs:"
            docker logs test_container 2>&1 || true
            exit 1
          fi

          # Try to check health endpoint
          echo "Checking health endpoint:"
          curl -f http://localhost:4004/health || echo "Health check failed"

          # Clean up
          docker stop test_container
          docker rm test_container
        env:
          DOCKER_BUILDKIT: 1

      - name: Build and push to registry
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha
            type=registry,ref=guarzo/wanderer-kills:buildcache
          cache-to: |
            type=gha,mode=max
            type=registry,ref=guarzo/wanderer-kills:buildcache,mode=max
          build-args: |
            VCS_REF=${{ github.sha }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VERSION=${{ steps.get_version_info.outputs.VERSION_TAG }}

  release:
    name: Create Release
    needs: [docker, auto-tag]
    runs-on: ubuntu-latest
    # Run when auto-tag creates a new tag OR when a version tag is pushed manually
    if: |
      (github.ref == 'refs/heads/main' && needs.auto-tag.outputs.new_tag_created == 'true') ||
      (startsWith(github.ref, 'refs/tags/v'))

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # We're running on a tag
            VERSION="${GITHUB_REF#refs/tags/}"
          else
            # We're running because auto-tag created a new tag
            VERSION="${{ needs.auto-tag.outputs.tag }}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Creating release for version: $VERSION"


      - name: Generate release notes
        id: release_notes
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          echo "Current tag: ${GITHUB_REF#refs/tags/}"
          echo "Previous tag: ${PREV_TAG:-none}"

          # Generate changelog between tags
          if [ -z "$PREV_TAG" ]; then
            echo "CHANGELOG=Initial release" >> $GITHUB_OUTPUT
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD)
            echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGELOG" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ steps.get_version.outputs.VERSION }}
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          body: |
            ## Changes in this release

            ${{ steps.release_notes.outputs.CHANGELOG }}

            ## Docker Image

            ```bash
            docker pull guarzo/wanderer-kills:${{ steps.get_version.outputs.VERSION }}
            ```
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  auto-tag:
    name: Auto Tag Version
    needs: test
    runs-on: ubuntu-latest
    # Only run on main branch pushes (not tags)
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
    outputs:
      new_tag_created: ${{ steps.check_tag.outputs.NEW_TAG_CREATED }}
      tag: ${{ steps.check_tag.outputs.TAG }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from mix.exs
        id: extract_version
        run: |
          VERSION=$(grep -E '^\s+version:' mix.exs | head -1 | grep -o '"[^"]*"' | tr -d '"')
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Found version: $VERSION"

      - name: Check if tag exists and create tags
        id: check_tag
        run: |
          VERSION="${{ steps.extract_version.outputs.VERSION }}"
          TAG="v$VERSION"

          # Parse semantic version (e.g., "2.0.1" -> major=2, minor=0, patch=1)
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          MAJOR_TAG="v$MAJOR"
          MINOR_TAG="v$MAJOR.$MINOR"

          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists"
            echo "NEW_TAG_CREATED=false" >> $GITHUB_OUTPUT
          else
            echo "Tag $TAG does not exist, creating it"
            echo "NEW_TAG_CREATED=true" >> $GITHUB_OUTPUT

            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"

            # Create the main version tag
            git tag -a "$TAG" -m "Release $TAG - Auto-tagged from mix.exs version"

            # Force update major tag (delete if exists, then create)
            if git rev-parse "$MAJOR_TAG" >/dev/null 2>&1; then
              git tag -d "$MAJOR_TAG"
              git push origin ":refs/tags/$MAJOR_TAG" || true
            fi
            git tag -a "$MAJOR_TAG" -m "Release $MAJOR_TAG (latest $TAG)"

            # Force update minor tag (delete if exists, then create)
            if git rev-parse "$MINOR_TAG" >/dev/null 2>&1; then
              git tag -d "$MINOR_TAG"
              git push origin ":refs/tags/$MINOR_TAG" || true
            fi
            git tag -a "$MINOR_TAG" -m "Release $MINOR_TAG (latest $TAG)"

            # Push all tags
            git push origin "$TAG" "$MAJOR_TAG" "$MINOR_TAG"
          fi
          echo "TAG=$TAG" >> $GITHUB_OUTPUT